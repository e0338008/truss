// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

package server

import (
        "flag"
        "os"
        "fmt"
	"log"
	"net"
	"net/http"
	"net/http/pprof"

	// 3d Party
	"google.golang.org/grpc"

	// This Service
	pb "{{.PBImportPath -}}"
	"{{.ImportPath -}} /svc"
	"{{.ImportPath -}} /handlers"
)

var AppConfig = &svc.Config{}

func init() {
	flag.StringVar(&AppConfig.DebugAddr, "debug.addr", ":5060", "Debug and metrics listen address")
	flag.StringVar(&AppConfig.HTTPAddr, "http.addr", ":5050", "HTTP listen address")
	flag.StringVar(&AppConfig.GRPCAddr, "grpc.addr", ":5040", "gRPC (HTTP) listen address")

	// Use environment variables, if set. Flags have priority over Env vars.
	if addr := os.Getenv("DEBUG_ADDR"); addr != "" {
		AppConfig.DebugAddr = addr
	}
	if port := os.Getenv("PORT"); port != "" {
		AppConfig.HTTPAddr = fmt.Sprintf(":%s", port)
	}
	if addr := os.Getenv("HTTP_ADDR"); addr != "" {
		AppConfig.HTTPAddr = addr
	}
	if addr := os.Getenv("GRPC_ADDR"); addr != "" {
		AppConfig.GRPCAddr = addr
	}
}

func NewEndpoints(service pb.{{.Service.Name}}Server) svc.Endpoints {
	// Business domain.

	// Wrap Service with middlewares. See handlers/middlewares.go
	service = handlers.WrapService(service)

	// Endpoint domain.
	var (
	{{range $i := .Service.Methods -}}
		{{ToLower $i.Name}}Endpoint = svc.Make{{$i.Name}}Endpoint(service)
	{{end}}
	)

	endpoints := svc.Endpoints{
	{{range $i := .Service.Methods -}}
		{{$i.Name}}Endpoint:    {{ToLower $i.Name}}Endpoint,
	{{end}}
	}

	// Wrap selected Endpoints with middlewares. See handlers/middlewares.go
	endpoints = handlers.WrapEndpoints(endpoints)

	return endpoints
}

// Run starts a new http server, gRPC server, and a debug server with the
// passed config and logger
func Run(cfg *svc.Config) {
	service := handlers.NewService()
	endpoints := NewEndpoints(service)

	if cfg.GenericHTTPResponseEncoder == nil {
		cfg.GenericHTTPResponseEncoder = svc.EncodeHTTPGenericResponse
	}

	// Mechanical domain.
	errc := make(chan error)

	// Interrupt handler.
	go handlers.InterruptHandler(errc)

	// PreRunInit for server run
	err := handlers.PreRunInit(cfg)
	if err != nil {
		log.Println("Err while pre run init", err)
		panic(err)
	}

	// Debug listener.
	go func() {
		log.Println("transport", "debug", "addr", cfg.DebugAddr)

		m := http.NewServeMux()
		m.Handle("/debug/pprof/", http.HandlerFunc(pprof.Index))
		m.Handle("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
		m.Handle("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
		m.Handle("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
		m.Handle("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))

		errc <- http.ListenAndServe(cfg.DebugAddr, m)
	}()

	// HTTP transport.
	go func() {
		log.Println("transport", "HTTP", "addr", cfg.HTTPAddr)
		h := svc.MakeHTTPHandler(endpoints, cfg.GenericHTTPResponseEncoder)
		errc <- http.ListenAndServe(cfg.HTTPAddr, h)
	}()

	// gRPC transport.
	go func() {
		log.Println("transport", "gRPC","addr", cfg.GRPCAddr)
		ln, err := net.Listen("tcp", cfg.GRPCAddr)
		if err != nil {
			errc <- err
			return
		}

		srv := svc.MakeGRPCServer(endpoints)
		s := grpc.NewServer()
		pb.Register{{.Service.Name}}Server(s, srv)

		errc <- s.Serve(ln)
	}()

	// Run!
	log.Println("exit", <-errc)
}

