// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/cmd/main.gotemplate (455B)
// NAME-service/handlers/handlers.gotemplate (63B)
// NAME-service/handlers/hooks.gotemplate (115B)
// NAME-service/handlers/middlewares.gotemplate (76B)
// NAME-service/svc/client/grpc/client.gotemplate (4.795kB)
// NAME-service/svc/client/http/client.gotemplate (107B)
// NAME-service/svc/config.gotemplate (341B)
// NAME-service/svc/endpoints.gotemplate (4.376kB)
// NAME-service/svc/server/run.gotemplate (3.548kB)
// NAME-service/svc/transport_grpc.gotemplate (3.056kB)
// NAME-service/svc/transport_http.gotemplate (108B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdMainGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x6f\x83\x30\x10\x85\x67\x90\xf8\x0f\x4f\x4c\x64\x28\xde\x23\x65\x0a\x1d\xb2\x34\x51\x92\x76\x77\xe0\x19\xac\x12\x13\xd9\x86\x28\x42\xfc\xf7\xca\x81\x56\x59\x3a\xd9\x77\xef\xbb\x7b\x4f\x27\x04\xb6\x5d\x45\xd4\x34\xb4\xd2\xb3\xc2\xe5\x01\x6f\x7b\xe7\x72\x14\x7b\x7c\xec\xcf\x78\x2f\x76\xe7\x3c\x89\x85\xc0\x91\xb6\x37\x46\x9b\x7a\x26\x70\xd7\x6d\x8b\x6e\xa0\xbd\x5b\xed\x09\xdf\x68\x07\xa5\x5b\xce\xf4\x17\xad\xd3\x9d\x59\x63\x1c\xf3\xe5\x3f\x4d\xaf\x0a\x0a\xe9\xf9\x2a\x87\x3a\x20\x49\x7c\x93\xe5\xb7\xac\x89\xab\xd4\x26\xd4\xfa\x7a\xeb\xac\x47\x96\xc4\x51\xaa\x5a\x59\xa7\xa1\x19\x09\x81\x73\xf0\x3c\xd1\x0e\xba\x64\x10\xc7\x31\xdf\x3d\xd9\x83\xf4\x0d\xde\xa6\x09\xc2\x0d\xa5\x70\xb4\x03\x6d\xfa\x0f\xd1\x48\x53\xb5\xb4\x2e\x4d\xe2\x55\x58\xac\x7a\x53\x3e\xad\xb3\x15\xc6\xd9\xe7\xf3\x56\x49\x4f\xc8\xaa\xb2\x74\x8e\x0e\x5a\xc1\x37\x7c\xa0\x91\x03\x71\x21\xcd\xdf\x21\x3c\x4d\x38\x62\x88\xe9\x92\x38\x0a\x6f\x7e\x90\xd6\x31\x7b\x2e\x8f\x4a\x55\x63\xbd\xc1\x1c\x29\x2f\xa8\x64\xdf\xfa\x6d\x67\x94\xae\x17\x75\x83\xdf\x44\xf9\x89\x8b\x94\x95\xaa\x9e\xe7\x97\xc1\x63\x6f\x96\xde\x94\xc4\x3f\x01\x00\x00\xff\xff\x61\xe6\x80\x30\xc7\x01\x00\x00")

func cmdMainGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_cmdMainGotemplate,
		"cmd/main.gotemplate",
	)
}

func cmdMainGotemplate() (*asset, error) {
	bytes, err := cmdMainGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/main.gotemplate", size: 455, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0x99, 0x7f, 0x39, 0xfe, 0xc6, 0xab, 0x4d, 0xa1, 0xee, 0x4, 0x1e, 0x1b, 0xfc, 0x8, 0x41, 0x5a, 0x87, 0x51, 0xfa, 0xa6, 0x55, 0x98, 0xa2, 0xed, 0x9f, 0xa9, 0xe8, 0x89, 0xb2, 0x8c, 0xb8}}
	return a, nil
}

var _handlersHandlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xd7\x52\x08\x4e\x4d\x55\x48\xcf\xd7\x2d\x29\x2a\x2d\x2e\xd6\x4f\x4f\xcd\x4b\xcf\xcf\xce\x2c\xd1\xcf\x48\xcc\x4b\xc9\x49\x2d\xd2\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xd6\x4b\xcf\x57\x48\xcb\x2f\x52\x48\xce\x4f\x49\x55\xd0\xd2\xaf\xad\xe5\xe5\x02\x04\x00\x00\xff\xff\x94\x4c\x08\x12\x3f\x00\x00\x00")

func handlersHandlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHandlersGotemplate,
		"handlers/handlers.gotemplate",
	)
}

func handlersHandlersGotemplate() (*asset, error) {
	bytes, err := handlersHandlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/handlers.gotemplate", size: 63, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x88, 0x2f, 0x79, 0x1b, 0x2b, 0xcc, 0xe8, 0x7c, 0x5c, 0x2c, 0x77, 0xdc, 0xe7, 0xd5, 0x2b, 0x5d, 0xa2, 0x78, 0xe, 0x3b, 0x19, 0x5f, 0x3e, 0x33, 0x37, 0xbb, 0x72, 0x86, 0x49, 0xfe, 0xdd}}
	return a, nil
}

var _handlersHooksGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xd7\x52\x08\x4e\x4d\x55\x28\x29\x2a\x2d\x2e\xd6\x4f\x4f\xcd\x4b\xcf\xcf\xce\x2c\xd1\xcf\x48\xcc\x4b\xc9\x49\x2d\x2a\xd6\x2f\x49\xcd\x2d\xc8\x49\x2c\x49\x2d\xd6\xcf\xc8\xcf\xcf\xd6\x4b\xcf\x57\x48\xcb\x2f\x52\x80\x89\x2a\x24\xe7\xa7\xa4\xea\x28\x60\x6a\x03\x29\x2e\x86\xa9\x06\x29\x4a\x4f\xcd\x53\xd0\xd2\xaf\xad\xe5\xe5\x02\x04\x00\x00\xff\xff\x96\x0d\x27\xe7\x73\x00\x00\x00")

func handlersHooksGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHooksGotemplate,
		"handlers/hooks.gotemplate",
	)
}

func handlersHooksGotemplate() (*asset, error) {
	bytes, err := handlersHooksGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/hooks.gotemplate", size: 115, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xd2, 0xec, 0x78, 0xfd, 0x0, 0x68, 0xa2, 0xa9, 0x70, 0xec, 0xdc, 0xd6, 0x3e, 0x3e, 0xe2, 0x33, 0x23, 0xf6, 0xe1, 0xe1, 0x6e, 0x7e, 0x65, 0x8d, 0x58, 0x9a, 0x41, 0x45, 0xac, 0x2, 0x77}}
	return a, nil
}

var _handlersMiddlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x02\x31\x0c\x05\xd0\xbd\xe0\x1d\xb2\x2e\x68\x0e\xe3\x09\x8a\xf9\xc6\x62\xdb\x48\x92\x61\x16\xa5\x77\x9f\xb7\x16\x17\x7a\x01\xa4\xf6\x48\x3f\x22\x58\x31\xd5\x7e\x2d\xf9\x5b\xa7\x74\x78\x70\x62\xfc\x7b\x4d\x04\x8f\x26\xd2\x71\x56\x47\x3c\xd5\xe8\x63\x4e\x6f\x13\x50\xe1\xbd\xef\xb7\x2b\x00\x00\xff\xff\xeb\xa6\xcc\x76\x4c\x00\x00\x00")

func handlersMiddlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersMiddlewaresGotemplate,
		"handlers/middlewares.gotemplate",
	)
}

func handlersMiddlewaresGotemplate() (*asset, error) {
	bytes, err := handlersMiddlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/middlewares.gotemplate", size: 76, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0xc8, 0x25, 0x5, 0xd9, 0x58, 0x94, 0xe2, 0x24, 0xe6, 0x20, 0x97, 0xcb, 0x5f, 0x27, 0x16, 0x26, 0x8f, 0x35, 0x28, 0xb6, 0x9c, 0xc7, 0xe2, 0xd5, 0x16, 0xe7, 0xae, 0xf7, 0x74, 0x21, 0x28}}
	return a, nil
}

var _svcClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xcd\x6e\xdb\x38\x10\x3e\xdb\x80\xdf\x61\xd6\x08\x16\x52\xa0\xd0\xf7\x2c\x7c\xa9\xd3\xed\x76\xb1\x4d\x8d\x34\x68\x0f\x45\x51\xd0\xd4\x48\x26\x2c\x93\x2a\x45\x3b\x36\x04\xbd\xfb\x62\x48\xca\x96\x12\xc7\x0d\x8a\xbd\x2c\x90\x43\x51\x91\xf3\x3f\xdf\xfc\xd0\x99\x4c\x60\xa6\x53\x84\x1c\x15\x1a\x6e\x31\x85\xc5\x1e\xac\xd9\x54\x15\x83\x9b\x8f\x70\xfb\xf1\x1e\xde\xde\xbc\xbf\x67\xa3\xe1\x64\x02\x77\x68\x36\x4a\x49\x95\x7b\x0e\x78\x90\x45\x01\x7a\x8b\xe6\xc1\x48\x8b\x60\x97\xb2\x82\x4c\x16\xe8\xb9\x3f\xa3\xa9\xa4\x56\xd7\x50\xd7\x2c\x7c\x37\x4d\x97\x02\x37\xdc\x62\x97\x4c\x67\x62\x71\x4c\x73\x2e\x56\x3c\x47\xc8\x4d\x29\xa0\x34\x7a\x2b\x53\xac\x80\x43\x7e\x37\x9f\x81\x28\x24\x2a\x0b\x99\x36\x60\x97\x48\x2a\x3e\xa1\xd9\x4a\x81\xec\x96\xaf\xb1\x69\xa0\x0a\xc7\xd1\xb0\xec\xe8\x21\xd5\x72\x5d\x6a\x63\x21\x1a\x0d\x07\x63\xa1\x95\xc5\x9d\x1d\xd3\x77\xae\x75\x5e\x20\xcb\x75\xc1\x55\xce\xb4\xc9\x27\x24\x71\x86\x34\x59\xa3\xe5\x29\xb7\xdc\xf3\x48\xbb\xdc\x2c\x98\xd0\xeb\x49\xb9\xca\x27\x68\x8c\x36\xd5\x98\x0c\x02\x00\x74\xc9\x3c\xc3\xdd\x64\xb9\xaf\xac\x91\xbb\xab\x5c\xb7\x9f\xe3\xa7\x9c\xb9\xbe\x5a\x49\x3b\xa1\x7f\x42\x1a\xb1\x91\x76\x61\x90\xaf\xd0\x3c\xb6\xd8\x61\x44\x95\x96\x5a\x2a\x17\x13\x79\x69\x0d\x57\x95\x8b\xf8\x19\x81\x03\x43\x1b\xef\x68\x38\x98\x4c\xe0\x9e\xc0\x0c\x49\x25\x6b\x75\xcd\xde\xbb\xcc\xcd\xb9\x5d\xc2\x55\xd3\xc0\xa4\xda\xba\xf4\x94\x0b\x20\xea\xfc\x4d\x9f\x3e\x1e\x0d\xe3\x00\xe5\x2d\x3e\x7c\x91\x76\x39\x7b\x03\x06\xed\xc6\xa8\x0a\xb8\x6a\x11\x82\x05\x17\x2b\x5f\x76\x7d\x6c\x85\x56\x0a\x85\xa5\x3a\x79\x90\x76\x09\x21\x03\x10\x52\xe0\x6b\xec\xbd\x05\x59\xb9\x12\x30\x58\x95\x5a\x55\x72\x21\x0b\x69\xf7\xa0\x33\x77\x2b\x78\x51\xa0\x01\xab\x21\x95\xbc\x48\x80\xab\x14\x0a\x6e\xd1\x80\x28\x74\x85\x89\x67\x3a\x58\x62\xa3\x61\xb6\x51\xe2\xe8\x70\x44\x34\xb8\xa4\xcc\xb0\x99\xf3\x6b\xa6\x95\x4a\x40\x2c\x66\x5a\x65\x32\x87\x00\x1e\x9b\xe9\xf5\x9a\xab\xd4\xdf\x26\xa0\x4b\x52\x57\x01\x63\x41\xec\xa3\xbb\x88\x21\x2a\x17\xec\x49\xb5\xd2\x09\x4d\x02\xae\x68\x62\xa8\x47\xc3\xc1\x96\x1b\x10\x22\xe4\xc2\x6b\x75\xc8\x50\xc5\x7f\x4f\x20\x83\xeb\x29\x18\xae\x72\x3c\x98\x22\xa9\x01\x1a\x43\x94\x2c\xfa\x5d\x88\x98\x2e\x64\x46\x5a\xe1\xb7\x29\x28\x59\x78\x9e\x81\x07\x81\x2e\x82\xc9\x8a\x7d\x31\xbc\x8c\xd0\x98\x04\xc6\x82\x2b\xa5\x2d\xf0\xb2\x2c\xf6\x41\xf9\xd8\xa9\x6a\x46\xc3\x81\x6b\xce\x81\xe8\x84\x54\x91\xbd\xaf\xdf\x7a\xa5\xd6\x8b\xd9\xd9\x3c\x45\x7e\x83\x99\x36\x18\x39\x97\x42\x23\x7e\xe6\xc5\x06\xab\x7b\xfd\xee\x6e\x3e\xfb\x10\xba\x2b\x12\x82\x2d\x91\xa7\x68\xaa\x38\x4e\xbc\x0f\x83\xba\xbe\xf2\x55\x71\x61\x91\x1c\x60\x34\x36\x06\x9d\xeb\x72\x95\x53\x6e\x89\x76\x61\x91\x85\x61\xe2\xd3\xed\x2c\x12\xab\x4f\xe0\x85\x6c\xb9\x5a\x54\x3e\xa0\x5d\xea\xb4\x0a\x9c\x0e\x8b\xba\xbe\xd7\xff\xe8\x07\x34\x70\x21\x03\x6a\x6f\x43\xa7\x41\xdb\x72\xac\xbd\xf1\x62\x3e\xd9\x64\xe9\x79\xd1\x29\xf4\x33\x73\x8b\x0f\x3e\x39\x51\x10\xa6\xcc\xa8\xa4\x3d\x8c\xeb\xba\x8d\xac\x69\x58\x5d\x77\x9d\xf6\x97\xe3\x1e\xaf\x7c\x72\xfb\x56\x09\x9d\x22\xe5\xb7\x43\xbe\xc3\x1f\x1b\xac\xec\x81\xe9\x06\x4f\x32\xb9\x06\xc3\x03\x97\xab\xe4\x77\xda\xa5\xf9\x42\xb2\x96\x7e\xbf\x2f\x5b\x67\xea\xe6\xc0\xdc\x2b\x19\xc6\x58\x4b\x88\x0f\x49\x8b\xe2\x70\x75\x6c\x29\xaa\xfa\x8d\xc1\xd0\x5b\x51\x3f\xa2\x43\x0f\xc6\x2f\xca\x73\x7f\x80\xb2\xbf\xbc\x91\xbe\xce\x38\x3a\xa3\x23\x98\x69\xab\x07\x55\xda\xd6\x5c\xfb\x79\xf8\x1a\x0d\xdb\x1e\xab\xb6\xe2\x10\x60\x55\x3b\x9e\x6e\xd1\x3d\xae\x38\x9a\x9b\x5e\xe7\x13\xf3\xd7\xb4\x1c\xce\xb8\x97\x74\x1d\x18\x34\x09\xb5\xf7\x68\xd8\x1c\x27\xf0\xaf\xcd\x5e\x76\x1c\xb1\x4e\xd1\x7f\x3d\x66\x9f\x1b\xb0\xaf\x03\xf4\x75\x80\xbe\x0e\xd0\x5f\x1a\xa0\xff\xcf\x09\x45\xc9\x02\x0f\x1d\xf8\xf4\x8d\x86\xe7\x5d\x09\x3f\x26\xce\xe6\x9a\x46\x17\x87\xfe\x13\x97\x79\x89\x96\xe5\x4f\x9a\x44\x76\xc9\xdd\xd4\xdb\xa2\xb1\x15\x70\xa7\xd8\x0d\xc4\x13\xf1\x80\x41\xea\x6c\xab\x81\xc3\xa6\x42\x73\x95\xea\x35\x97\xea\x19\x56\x6f\x84\xc1\xdc\xc8\x35\x37\xb2\xd8\x93\x4c\xb6\x29\x40\x2a\xe0\x61\x3c\xb5\xf3\xf0\x6c\x28\xd1\x77\x08\x4d\x4e\x9b\x91\xfe\x4f\x5c\xed\xdf\x39\x6f\xa4\xb2\x68\x32\x2e\xb0\x6e\x62\x88\x3a\xa7\xde\x50\xf4\x9e\x5f\x4f\x8f\x82\x2c\xba\xfc\x79\x19\xc6\xc7\x72\x71\x1a\x8e\xd0\x75\x0a\xea\x11\x86\xbe\x4f\x5e\x88\xe1\xb9\xa6\x3a\x09\xa1\x17\x08\x1c\xcf\x22\xf8\x73\x74\xbc\x05\x07\xe5\x19\xb8\x1d\xd7\xcb\x20\x3c\x17\xc9\x29\x04\x5b\x17\x5e\x8a\xdf\x0f\xb7\xb7\x82\x47\x27\xb0\x73\x84\xe7\xa0\xfb\x71\x12\xb8\xd1\xd0\xee\x4b\xec\x6d\x4a\xa8\xac\xd9\x08\xeb\x6c\x86\xd5\x01\x5f\xbf\xd1\x8b\x49\xe5\xc7\x96\xed\x2e\x29\x8f\x12\xa5\xc0\x9d\x1c\x1a\x6b\x9d\xca\x4c\xa2\xff\x7d\x76\x7c\x59\xb8\x4d\xec\x4c\xf6\x14\x90\x6c\x74\xd9\xf5\x22\xf6\xa1\x93\x35\x97\xdb\x99\xdd\xb5\xfb\xed\x13\xaa\x34\x5a\xe1\xde\x3d\x10\xbc\x5f\x71\x5f\x5d\x7d\x0c\xdc\x69\xd6\x70\x4a\xb7\x5f\xe8\xba\xdd\x8f\x30\x05\x52\x4a\x77\xc7\x1d\xef\x37\x66\x73\x70\xe3\xdc\xaa\x75\x2e\xb5\x99\x8a\xe1\xd4\xd6\xee\x16\xed\x63\x27\x85\xdd\x3d\x2d\x91\x75\x0a\x97\xed\x9f\x1a\xd8\x87\x9b\xf8\x31\x87\x8f\x81\x76\x6c\xc9\x65\x0f\xa8\x41\xfb\xda\x59\x1d\x5f\x3b\xce\x43\xbf\x59\x65\x06\xdb\x04\xb4\x23\x0a\xbb\x63\x2e\xa2\x68\x15\xb3\x28\xf8\xff\x07\x11\xc3\x16\xf6\xba\xa7\xf4\xac\xa1\xdc\xbb\x63\x02\xab\x04\xb6\x7e\xed\x34\xe1\x85\x13\xde\x4c\x9e\xbd\xf7\x6a\xba\x5c\xa7\x30\x85\x43\x24\x7f\x6b\xa9\xa2\xcb\x75\x9a\x1c\xaf\xe6\x24\xe4\x55\x33\xc6\xe2\xb8\xa3\x32\x64\x49\xd8\xdd\x01\x8e\x7f\x03\x00\x00\xff\xff\x13\x4d\xdd\xde\xbb\x12\x00\x00")

func svcClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientGrpcClientGotemplate,
		"svc/client/grpc/client.gotemplate",
	)
}

func svcClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := svcClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/grpc/client.gotemplate", size: 4795, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0xb, 0x95, 0x7d, 0xca, 0x7a, 0xc, 0x2b, 0x4, 0x2c, 0xc7, 0xb6, 0xf8, 0x27, 0x53, 0xcb, 0xe7, 0x25, 0x5a, 0x28, 0x25, 0x2f, 0x75, 0x90, 0xab, 0x44, 0xde, 0x75, 0x3f, 0xd, 0xfd, 0x4a}}
	return a, nil
}

var _svcClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\xaa\x02\x31\x10\x06\xe0\xfe\xc1\xbb\xc3\xd4\x0b\x66\x0e\x61\xb3\xa5\x60\x2e\x10\xd6\xdf\xb8\x38\x66\xc2\xe4\xb7\x0a\x7b\x77\x11\xec\xbf\x6f\x4e\x5d\xe4\x0a\x48\xf5\x13\xe3\x3d\x86\x56\xb4\xea\xcf\x9d\xfa\x20\x3b\xa3\xb4\xd1\x3d\xa8\xc4\xab\x5b\x21\x52\x75\xb9\x7b\xc8\xe6\x37\xc8\xa2\xc7\xf1\xff\x37\xe7\x56\xcc\x24\xad\x39\x5f\x56\x58\x47\xa4\xb3\xed\x68\xcc\xbf\x23\xe9\xcb\x3e\x01\x00\x00\xff\xff\xc4\x1a\x19\x91\x6b\x00\x00\x00")

func svcClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientHttpClientGotemplate,
		"svc/client/http/client.gotemplate",
	)
}

func svcClientHttpClientGotemplate() (*asset, error) {
	bytes, err := svcClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/http/client.gotemplate", size: 107, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0xac, 0x71, 0x30, 0xd7, 0x2a, 0x4b, 0xec, 0x4d, 0x63, 0x80, 0xb8, 0xed, 0x24, 0x66, 0x32, 0x32, 0xcc, 0x89, 0xa1, 0x8c, 0xff, 0xa0, 0xc1, 0x31, 0x0, 0xc5, 0xab, 0xf5, 0x1d, 0x4c, 0xe3}}
	return a, nil
}

var _svcConfigGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\xd1\x4a\x43\x31\x0c\x06\xe0\xeb\x53\xe8\x3b\x84\x5d\xe9\x85\xeb\x33\xc8\xd4\x79\x39\xc6\x5e\xa0\x6b\x73\x7a\xc2\x5c\x5a\x93\x74\x20\xe2\xbb\xcb\x51\x76\x40\x14\x2c\xf4\xe6\xe7\xcb\x1f\x48\x8b\xe9\x14\x0b\x82\x5e\x92\x77\xde\xd1\xb9\x55\x31\xb8\xf1\x6e\x98\xcc\x9a\x49\x64\xfd\x4a\x56\x85\x6c\xea\xc7\x75\xaa\xe7\x50\xea\xdd\x89\x2c\xcc\x7f\x01\x61\xe6\x2b\xef\x6e\xe7\x96\x10\x60\x53\x79\xa4\x02\xa9\xb2\x45\x62\x05\x9b\x10\x04\x5f\x3b\x09\x66\x18\x09\x5f\xb2\xc2\x58\x05\xa4\x33\x13\x17\x88\xa0\x28\x17\x14\xef\xec\xad\xe1\x75\x5c\x4d\x7a\x32\x78\xf7\x6e\x78\x3e\x1c\x76\xf7\x39\x0b\xfc\x7e\x6a\x42\x5c\xbc\x1b\x1e\xf0\xd8\xcb\xdf\x68\x31\xdb\xfd\x6e\xf3\x5f\xcf\x16\x19\x85\xd2\xbc\x72\x8f\xda\x2a\x2b\x3e\x72\xaa\x19\x05\x7e\x5c\x65\xfd\x9d\x5e\xcd\x53\xe7\xe4\xdd\x87\x77\x9f\x01\x00\x00\xff\xff\x03\xc0\xb2\xe3\x55\x01\x00\x00")

func svcConfigGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcConfigGotemplate,
		"svc/config.gotemplate",
	)
}

func svcConfigGotemplate() (*asset, error) {
	bytes, err := svcConfigGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/config.gotemplate", size: 341, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0x1f, 0xbf, 0x4e, 0xc, 0x2, 0x1a, 0x27, 0x84, 0x85, 0x77, 0xa4, 0x21, 0xae, 0x65, 0xa3, 0x6, 0x8c, 0x5c, 0xd, 0xf6, 0xbc, 0x2a, 0xa6, 0x50, 0x47, 0x5a, 0x7, 0x48, 0xac, 0xe8, 0x15}}
	return a, nil
}

var _svcEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5d\x6f\xdb\xb8\x12\x7d\xb6\x01\xff\x87\xa9\x91\x8b\xd8\x85\x42\xbf\xa7\xc8\xc3\xbd\x6d\xee\xbd\x01\xb6\x1f\x68\xb2\xbb\x0f\x45\x51\xd0\xd2\xc8\x22\x42\x91\x2c\x49\xd9\xf1\x0a\xfe\xef\x8b\x21\x29\x59\x8e\xb5\xdd\x76\x1f\x17\xfb\x10\xc4\xe6\xc7\xe1\xcc\x39\x33\x87\xf4\x6a\x05\xaf\x75\x81\xb0\x41\x85\x96\x7b\x2c\x60\xbd\x07\x6f\x1b\xe7\x18\xbc\x79\x0f\xef\xde\x3f\xc0\xed\x9b\xbb\x07\x36\x9b\xae\x56\xf0\x11\x6d\xa3\x94\x50\x9b\xb8\x02\x76\x42\x4a\xd0\x5b\xb4\x3b\x2b\x3c\x82\xaf\x84\x83\x52\x48\x8c\xab\x7f\x41\xeb\x84\x56\xd7\xd0\xb6\x2c\x7d\x3e\x1c\x86\x33\xf0\x86\x7b\x1c\x4e\xd3\x77\x5a\x32\x9b\x1a\x9e\x3f\xf2\x0d\x82\xdb\xe6\xf4\x75\xb5\x82\x87\x0e\x1c\x72\xad\x3c\x17\xca\x41\x8d\xbe\xd2\x85\x03\xaf\xa1\xe6\x8f\x08\x42\x15\x62\x2b\x8a\x86\x4b\x40\x55\x18\x2d\x94\x77\x50\x5a\x5d\x83\x43\xbb\x15\x39\xba\x2c\x40\x59\xfc\xda\xa0\xf3\xc0\x55\x01\x16\x9d\xd1\xca\x21\xf8\xbd\xc1\x00\x45\x6b\x29\x17\xed\xf0\x08\x93\x01\x77\xb0\x43\x29\xe9\x3f\xaa\x5c\x17\x68\x1d\x01\x04\xc0\x02\xd3\x40\xa9\x6d\xda\x19\xe0\xb2\x30\xc0\x89\xa4\x12\x74\x63\xc1\x35\xc6\x68\x4b\x2c\x7b\xcb\x95\xa3\xcf\x74\x9e\xe0\x52\xfc\xc6\xbd\xd0\x2a\xc0\x95\xda\xd6\xdc\x3b\x46\x99\x8b\x3a\x2c\x5a\xcc\xa6\x93\x79\x59\xfb\x39\xfd\x27\x02\xf0\x89\x3e\xd3\xb7\x8d\xf0\x55\xb3\x66\xb9\xae\x57\x1b\x7d\xf5\x28\xfc\x8a\xfe\xba\xc8\xe3\x22\xb3\x86\x79\xdb\xb2\x0f\xff\xb9\x0b\x70\x1f\xb8\xaf\xe0\xea\x70\x98\xcf\xa6\xcb\x44\xef\x6d\x4f\x58\xae\xa5\xc4\xdc\xbb\x2e\x6e\x5f\x0d\x78\x00\x5f\x71\x0f\xb9\xae\x0d\x25\xc9\x15\xf0\xa2\xe8\xd8\x65\x70\xe7\x2f\x5d\x40\xab\x91\x2b\x4f\x64\xae\x11\x1a\x87\x05\xb1\xc6\xa1\x42\x69\xd0\x82\xf3\xb6\xc9\x7d\x46\xd3\xe9\xac\xf1\xa3\x84\xf2\x1a\x78\xc0\x73\x42\x6d\x24\x82\xe1\x96\xd7\xe8\xd1\x86\x02\x0b\x33\x77\x0a\x78\x94\xcc\x66\x20\xfc\xa5\xa3\xf3\xca\x46\x06\xe6\xcb\x46\xe5\xc4\x6a\x0a\x5b\x21\x11\xaf\x41\x9b\x50\xea\xa0\x69\xaf\x41\x7b\xd5\x9d\x19\x10\xd7\xdc\x09\xc7\xe0\xbf\xda\x02\x3e\xf1\xda\x48\xcc\x60\xaf\x1b\xa8\xc5\xa6\xf2\x60\xb8\x23\xdd\x07\x7c\x51\x90\xfd\x49\xf1\x20\x63\x75\xd1\xe4\x18\xb9\xe0\x0a\x2a\xef\x0d\xfb\x3f\x57\x85\xa4\x28\x77\xc2\x57\x80\x3c\xaf\x52\x01\xc3\xa2\x3b\x7f\x09\x3b\x61\xb1\x80\xc6\x44\x54\x67\x30\x17\xa5\xc8\xc1\x70\x5f\x31\x58\xdc\xc5\x08\x85\xa3\x13\xd6\x7c\x2d\xf7\xc0\xa1\x16\xce\xc7\xea\x87\x02\x9d\xd8\x28\xda\x2b\xd4\x56\x3f\x62\x20\xf4\x3e\xaa\xd3\x77\x4b\x08\x12\x9f\x89\x1e\x35\x21\x8c\x8e\x4d\xb6\x3c\xe5\x38\x97\x02\x95\x3f\xe5\x78\xa0\xe0\xb1\xf7\xe4\x9e\x3a\x34\x02\x62\xf1\x4d\x3d\xa9\x49\x22\x63\x82\x78\xae\x31\x56\xd8\x31\x66\xa1\x3c\xda\x92\x53\x6d\x8d\xeb\x11\xd0\xfa\xe3\xc6\x1d\xa0\x71\xd1\xb1\x52\xc3\xad\x82\x1a\xef\x70\xf7\x3a\x65\x94\xeb\x7a\x2d\x54\x20\xab\x4e\x41\x0e\xf4\xcd\x92\x4d\xf8\xc6\x2a\x10\xa1\xa8\x29\xc2\x9c\x4b\x89\x36\xd6\x75\x8a\x96\xcd\xa6\x21\xa1\x33\x56\xdb\xd9\xb4\x6d\x2d\x57\x1b\x84\x0b\x01\xd7\x37\xc0\xba\x1d\x6f\xa3\x26\xe4\x79\x93\xb6\xbd\x10\xec\x1d\xaf\xf1\x70\xe8\x10\x00\xa0\xcf\x83\xdd\xf6\x45\xda\xb6\x57\x34\x4c\xbb\x0e\xcf\xdb\xf7\xbb\x8e\xa2\x6a\x85\xc5\x20\xd2\x25\x0c\x4e\x5f\xe4\xfe\x09\x92\xc7\xb0\xd7\xf1\x7f\x46\xa5\xf1\xd2\xac\x59\xdb\xfe\x4f\xd3\x32\xb8\x10\xec\x63\xf4\xd1\x87\xbd\xc1\xb4\x75\x09\x8b\xf3\x45\xd1\x60\x07\xab\x32\x40\x6b\xb5\x5d\x12\x31\x93\x49\xe7\xc0\x61\x94\x42\x46\x36\x42\x05\x05\x45\x41\x2c\x69\x8b\x28\xc3\xda\x17\x37\xa0\x84\x8c\x28\x93\xa4\x90\x12\x32\x00\xd1\xd8\x21\xc2\x87\xf1\xee\x14\xf6\x3d\x01\x2e\x33\xc2\x99\x4d\x09\xa1\x6d\x13\xd5\x81\xe7\xb7\xd4\x69\x27\x64\x87\x6e\xbe\xf0\x18\xc8\x4e\x42\x0e\x05\xb8\xf0\x38\xaa\x41\x14\x81\xf0\xc6\xb2\x75\x10\xa2\x1c\x6e\x8e\x2b\xee\x43\x73\x2e\xcf\xcb\xe2\x94\x06\x02\x1f\xd7\xb1\xbb\xfc\xfa\xd6\x6a\x49\xb5\xfe\x1a\x1c\x0c\x47\x41\x86\x52\x11\xfc\x57\x4a\x2a\x81\x8c\x91\x79\x56\x12\x71\xe3\xb6\x97\xd7\xb1\x67\xb5\x16\x62\x4a\xcb\xc6\x94\x1d\xd5\x36\xa9\xdb\xcf\x6d\x3b\xc9\xd2\x44\x14\x22\x49\x77\xaa\xe1\xaf\x96\x9b\x7f\x4b\x79\xfb\x94\xa3\xf1\xb0\xb3\xdc\xb8\x68\xc7\x3d\x95\xa5\x40\x59\xd0\x85\x94\x1a\xf8\xd8\xd1\x41\xed\xe8\x61\x23\x97\x2d\x7b\x2b\x8a\x42\xe2\x8e\xdb\xf4\x04\xfa\xd9\x75\xaf\x22\x7a\x07\x18\x23\xf7\x64\x45\x64\xb1\x9e\xe0\xeb\x7e\x79\xb8\x46\x70\x8b\x76\xdf\x2b\x4b\x1d\x47\x4e\xe3\x7a\x77\x59\xad\xe0\xbd\xa1\x5b\x86\x4c\x36\x1b\x38\x5c\xce\x15\xdd\xb4\x74\x37\x61\x41\xfb\xd6\x7b\x50\xa4\x48\xbc\x81\xf1\x29\x97\x4d\x81\x45\x7c\x0b\xad\x91\x62\xa0\xb4\x0d\x16\xec\x9c\x91\xc5\x31\xaa\x0c\xe6\xf7\x9e\xfb\xc6\xcd\x33\x98\x7f\x10\x6a\x33\x5f\xce\xa6\x9d\x79\xbc\x1c\xb8\xc7\x1f\x01\xc0\x08\x33\xd9\x31\x1e\xc6\x98\xf3\x56\xa8\x4d\xac\x2f\xa1\xd2\xf8\xf5\x0d\xd4\xdc\x7c\x8a\x73\x9f\xa3\x08\xed\x21\x54\x03\x79\xdf\x9f\xfa\xdb\x64\x32\x1f\xd4\xd8\xfc\x1a\xda\x43\xd6\x6d\x4e\x95\x30\x09\xd5\x30\x21\x5d\xbe\x50\x44\xa1\xaa\x03\x6e\x1f\x5d\x9b\xac\xe6\x4b\x06\xfa\x91\xe6\xbb\xf8\x3e\xe1\xd3\xe7\x57\xf0\x42\x3f\xa6\x02\x35\x5c\x89\x7c\x51\xd6\x9e\xdd\x1b\x2b\x94\x2f\x17\xf3\xdb\x0e\xa4\x57\xf3\xf2\x5f\xee\x12\x0a\x8d\x0e\x94\xf6\x80\x4f\xc2\xf9\x57\xe0\x10\x87\x45\xd0\x17\x92\x63\x1b\x3d\xa7\xb0\x96\xcb\xde\xc8\x0a\x94\xe8\x71\xd1\x05\x11\x66\x4f\xf2\x10\x2a\x3f\x66\xd1\x73\xf9\x23\xac\x89\x32\x80\xdc\xdc\xc0\x09\x7f\x5d\x1f\x8e\x1a\x33\xdc\x0c\x32\x58\x8c\x2e\x59\x1e\xdb\xf2\x99\x02\x5d\x4b\xfe\xc4\xd7\x28\xb1\x38\x16\x49\xfc\x69\xb1\x41\xdf\x15\xf5\xf0\x69\x18\x6b\x7b\x57\xa1\xea\x67\xf5\xb0\x8e\x13\x5a\xac\xc6\x2c\x36\x60\x6a\x91\x26\xae\x86\xf8\x83\x85\xc7\x9f\x3d\x22\xa7\xc7\x91\x15\x79\x7a\xbc\x0e\xa2\xa8\x44\x5e\x85\xbd\x0e\xd5\x58\x10\xe9\x35\x90\xb6\x77\xaf\x21\x6d\xbb\xb7\xc0\x79\x62\xc1\x99\x63\x65\x67\xe7\x2e\x3e\x62\xec\xa7\xae\x75\x92\xdb\x5f\x37\xaf\xb3\xb8\xb2\x94\x6b\xe0\xdd\x62\x8e\x62\x1b\x9f\x8f\x21\xcd\x67\x6f\x73\x06\xf7\x88\x47\x9c\x01\x4c\x98\xe9\xde\xb5\xbd\x2b\x50\xa8\x54\xa1\x05\x7a\x2e\x64\x78\x82\x76\x5d\x16\x7f\xf0\xa4\xd7\x33\x97\xc2\xef\xd9\x37\x2d\xe6\x24\xff\xa1\xd3\xfc\x30\xaf\xff\xf8\xd0\xdf\xd8\x87\x4e\xf6\x65\xe3\x4f\xca\x6f\xda\xd2\xef\x01\x00\x00\xff\xff\xf4\xe5\x36\x9d\x18\x11\x00\x00")

func svcEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcEndpointsGotemplate,
		"svc/endpoints.gotemplate",
	)
}

func svcEndpointsGotemplate() (*asset, error) {
	bytes, err := svcEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/endpoints.gotemplate", size: 4376, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6d, 0xeb, 0x8e, 0xc9, 0x8e, 0x21, 0x36, 0xb4, 0xe3, 0x87, 0x8a, 0x95, 0x1a, 0xab, 0x9f, 0xb, 0xd4, 0xef, 0xc4, 0x86, 0x6e, 0x1c, 0xc4, 0x4c, 0xe7, 0x49, 0xec, 0xa1, 0x94, 0x1b, 0xb9, 0x7c}}
	return a, nil
}

var _svcServerRunGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x5f\x6f\xdb\x36\x10\x7f\x96\x01\x7f\x87\xab\xd0\x0d\x32\xe0\x52\x05\xb6\xee\x21\xab\x1f\xda\x38\x4d\x03\x34\xa9\xe1\xb8\xdd\xe3\xc0\x48\x27\x99\xa8\x44\x0a\x24\x65\x37\x10\xfc\xdd\x87\x23\x25\x59\x4a\x13\xb7\x59\x1e\x62\x52\xfc\xf1\x77\xff\xef\x18\xc7\x70\xae\x52\x84\x1c\x25\x6a\x6e\x31\x85\xbb\x7b\xb0\xba\x36\x86\xc1\xf2\x33\xdc\x7c\xde\xc0\xc5\xf2\x6a\xc3\xa6\x93\x38\x86\x35\xea\x5a\x4a\x21\x73\x8f\x80\xbd\x28\x0a\x50\x3b\xd4\x7b\x2d\x2c\x82\xdd\x0a\x03\x99\x28\xd0\xa3\xbf\xa2\x36\x42\xc9\x33\x68\x1a\xd6\xae\x0f\x87\xe1\x09\x2c\xb9\xc5\xe1\x31\xed\x09\x32\x9d\x54\x3c\xf9\xc6\x73\x04\x83\x7a\x87\x9a\xbe\x88\xb2\x52\xda\x42\x34\x9d\x40\xfb\x17\x66\x05\xcf\xc3\xc1\x5e\x99\xe1\x2e\x2b\x6d\x38\x9d\x04\x61\xa1\x72\xf7\x2b\xd1\x76\xbf\xf1\xd6\xda\x6a\xb4\x89\xab\x4a\xab\x2c\x24\x41\x41\x1c\xc3\x1f\x29\xac\xb8\xb6\xf7\x04\xc9\x95\xca\x0b\x64\xb9\x2a\xb8\xcc\x99\xd2\x79\x9c\xeb\x2a\xe9\xa1\x1b\x32\xfa\x16\xf5\x4e\x24\x38\x9d\x04\xd5\x1d\x84\x4d\xc3\x56\xef\xaf\x9c\xbe\x2b\x6e\xb7\xf0\xea\x70\x70\xc2\x9a\x86\x8d\xbf\x42\x6c\x76\xc9\x53\x47\x5b\x2e\xd3\x02\x35\xd9\x34\x23\x61\x3b\xae\x61\x89\x19\xaf\x0b\x7b\xae\x64\x26\x72\x30\xbb\x84\xf9\x25\x9d\x67\xb5\x4c\x40\x48\x61\xa3\x19\x34\xd3\x49\x40\xde\x61\xb7\x56\x0b\x99\x7f\xe5\x3a\xfa\x7d\x74\x97\x2d\xf1\xae\xce\xdf\xa5\xa9\x9e\x43\x98\xd2\x9a\xf1\x34\xd5\xe1\x1c\xc2\xb3\x37\xaf\xff\x7a\x4d\x0b\x07\x01\x2e\x53\x28\xd1\x6a\x91\x18\x28\x84\xb1\x28\x81\x90\x68\x4c\x38\xfb\xa9\x94\x8f\x9b\xcd\xaa\x15\x42\x5e\x1e\xca\x78\xe3\x64\x10\xe0\xf9\xb4\x97\xeb\xd5\x79\x4b\x4b\xb1\x18\xd2\xfe\xe9\x68\xf3\xf5\xea\x1c\x22\x22\x9f\x3d\xc2\xee\x03\xf7\xc5\x20\xa0\xdc\x09\xad\x64\x89\xd2\xc2\x8e\x6b\xc1\xef\x0a\x34\x73\x10\x19\x18\xb4\x0c\x3e\x14\x3c\x37\xb0\xe5\x3b\x84\x4a\x0b\xa5\x85\xbd\x77\xe9\x0e\x17\x72\x47\x78\xc3\xa6\x93\x40\x64\x8e\x1b\xce\x16\xa0\x0c\xbb\x44\x8b\x72\x17\x85\xcb\x8b\xf7\x5f\x2e\xff\x7d\xb7\x5c\xae\xc3\xd9\xdf\x1e\xf0\x62\x01\x61\xe8\x42\x13\x3c\x11\x0b\x58\x38\xe4\x74\x12\x1c\x3c\xb1\x4b\xf9\x31\xf1\xea\xf3\x7a\x43\x94\xee\xe8\x49\xca\xce\xf1\xb0\x80\xac\xb4\xec\xb6\xd2\x42\xda\x2c\x0a\xcf\x7e\x33\xe1\xdc\xdd\x9d\x1d\xa5\x3c\xa2\x3e\xdd\xff\x45\xed\x07\xa2\xc6\xca\x3f\x42\x4b\x81\xfb\x45\xda\x2e\xc6\x23\xda\x43\x9f\xe8\x37\xb8\xbf\x90\x69\xa5\x84\xb4\x26\x32\xbe\xfc\xa0\xba\x63\x4d\xc3\xda\x62\x64\x37\xbc\xc4\xc3\xe1\xd6\x75\x90\x99\x2b\x96\xfe\x86\x13\x18\xc7\xf0\xbe\x36\x42\xa2\x31\x90\xaa\x92\x0b\xc9\xba\xdc\xf8\x47\xf3\xaa\x2b\x6a\xd8\x0b\xbb\x85\x52\xa4\x69\x81\x7b\xae\xd1\x30\xb8\x45\x84\xae\x3c\xe3\xe1\x49\xae\xa6\x93\xa0\xd3\x66\xd1\x63\x18\xf1\xb5\x74\x9d\xb2\x7d\x1e\x76\x4a\x1d\x75\x08\xa8\xd4\xa3\xe9\x24\x68\x1a\xcd\x65\x8e\xf0\x52\x90\x1f\x7b\xc3\xae\xd1\x6e\x55\x6a\xa8\x4d\x90\xdf\x9a\x66\xa3\x3e\xa9\x3d\x6a\x78\x29\x5a\xa3\x7b\xce\x85\xb3\xfb\x9a\x7f\xc3\xa6\xf9\xe1\x74\xa0\x4a\xd0\x34\x28\x53\xc7\xe7\x15\xc3\xde\x55\x67\x8b\xb1\xef\x9a\x67\x28\xf6\x83\xc8\x33\x6a\xcd\x27\x14\x9e\x8f\x54\x39\x8c\xe2\x61\xb0\xc0\x84\x26\xd4\x31\x8c\xcf\x0d\xcd\xd1\xaa\x07\xc1\x39\xe6\x52\x0f\xf1\x7e\xd0\x68\x6b\x2d\xa1\xff\xda\xe6\x20\x0d\xc3\x5a\x82\xb1\x5c\x5b\x03\x1c\x24\xee\x81\x3a\x5c\x3b\xb0\xe6\xe0\x3a\x50\xb7\xa1\x1e\xca\xc1\xb5\xd9\xf6\x9b\xd7\xdc\x6e\xd1\x51\x55\xdc\x18\x4c\x21\xf1\x6d\x9d\xd0\x85\xca\x73\x9a\x7b\x2e\xd7\xd7\xb5\x8c\x92\x6c\xd8\xef\x7d\x87\xef\x12\xed\x6c\x60\xcc\x0d\xee\xbb\x44\x9b\x3d\x0c\xe3\x63\x35\xe3\xad\x14\x19\x24\x59\xce\x2e\xe9\x11\x20\x12\xaa\xe8\x35\x9a\x4a\x49\x83\x17\x32\x51\x29\x6a\x58\x2c\x40\x8a\xc2\x17\xea\xcf\xa0\x6d\xbe\xd0\x8e\xce\x5b\x68\x07\x1b\xc6\xf5\x1a\x93\x2d\x97\x22\xe1\xc5\x20\xfb\x51\xeb\x84\xd4\x2d\xf9\x37\x8c\xe8\x1c\x50\x6b\xa5\xfb\x82\xb9\x92\x16\xb5\xae\x2b\xdb\x59\x4d\x97\x72\x75\xf4\x41\x0f\xf8\xe8\xbf\x44\xc4\xd8\x5f\x5f\x69\x5c\xd7\xf2\x4a\x0a\x0b\x99\xd2\x5d\x3c\x74\x2d\xbd\xe8\x91\x37\x8f\x58\x0a\xc0\xcc\x7b\x8a\x40\x2f\x06\xee\x28\x54\xce\x56\xd4\x5f\x0b\x19\x85\x17\x5a\xc3\x7e\x2b\x0a\x9a\x18\x48\xac\x6e\x24\x87\x73\xba\x45\xf7\x83\x8a\xec\x8d\xda\x5d\xef\x08\x3f\x6b\xfd\xa8\xea\x0d\xa2\xe0\xb7\xc3\x7c\x2c\xc4\x6a\x2e\x0d\x35\xf1\xb0\x9b\xde\xb4\x68\xa7\x20\x45\xa7\x9f\x28\xde\xea\xa0\x74\x56\xd1\x04\x6e\xf3\x03\xaf\xeb\xef\x2e\x41\x82\x92\x79\x2f\x45\x61\xec\x98\xfc\x4b\x28\x0e\xe7\x1e\xdf\xba\xf0\x03\xa9\xe2\x4e\xd8\x95\x4c\xf1\xfb\xec\xd4\xdd\xa4\x4c\x0b\x21\xf1\x69\x8a\x73\x0f\x38\x49\x42\xff\x44\x71\x82\x64\xe5\x01\x27\x49\xcc\x7d\x79\xa7\x8a\xa7\x39\x6e\xdd\xf9\x49\x0a\xab\x79\x72\x42\x8b\x0d\x1d\xcf\x5a\x37\xbb\xcc\x7d\xfb\xca\x63\x3f\xb9\x60\xbe\x93\xa9\xf3\x77\x34\x0a\xcb\x1c\x4a\x17\xfe\xa8\xcf\x4a\xf7\x10\xea\xe3\xfa\xac\x04\xa0\xab\x0f\xe2\xdf\xcd\x64\x67\xd8\xb6\x6b\xe1\x34\x06\xe8\xa4\x2f\x8b\xae\x19\xcc\x7f\x52\xfd\xb3\x5f\x31\xee\xf8\xd6\xdb\x3e\xb0\xcd\xf5\xc2\xff\x67\x1b\x5d\x0d\xe7\x43\xd3\xba\x77\x81\xd3\xa9\x90\xae\xb0\xc8\x40\x89\xb6\xd5\x2a\x0a\x6d\x52\x3d\x86\x7e\xa4\x76\x7b\xab\x50\x6b\xb7\xf7\xfd\x9e\x96\xbe\x36\x03\xa3\x77\x43\xff\x11\xa1\x7f\x52\x8c\x26\x45\x10\xb8\x0e\xeb\x5e\xa3\x5d\x89\x69\x5f\x60\xd5\x1d\x5b\x63\x4e\x9a\xe9\x27\x1e\x27\x91\x99\x83\xd1\xbb\x07\x49\x64\x98\xf7\x6d\x21\x1f\xb8\x73\x5d\xcb\x17\xd3\xc9\xd8\x69\xf8\xdd\x35\x99\xb7\xaf\xda\x56\xe7\x94\xff\x2f\x00\x00\xff\xff\x33\xb9\x42\x52\xdc\x0d\x00\x00")

func svcServerRunGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcServerRunGotemplate,
		"svc/server/run.gotemplate",
	)
}

func svcServerRunGotemplate() (*asset, error) {
	bytes, err := svcServerRunGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/server/run.gotemplate", size: 3548, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0xf, 0x76, 0xf7, 0x41, 0x6, 0xf6, 0x2a, 0x4d, 0x37, 0x16, 0x31, 0xcc, 0x7c, 0x9f, 0x8f, 0xd, 0xb9, 0xfb, 0xf6, 0x48, 0x29, 0x75, 0x28, 0x1a, 0x24, 0x3a, 0xd7, 0x98, 0x7b, 0x61, 0xd4}}
	return a, nil
}

var _svcTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5d\x6f\xe2\x38\x14\x7d\x06\x89\xff\x70\x17\x8d\x56\x30\xa2\xce\x3e\x57\xea\xcb\xb4\xdd\x69\xb5\xdb\x0f\x75\xd1\xec\xc3\x68\x34\x32\xc9\x25\xb1\x48\xec\xd4\x36\xb4\xac\xc5\x7f\x5f\x5d\xdb\x09\xa1\x50\xca\x3c\x20\x11\xfb\xf8\x7e\x9c\x73\x7c\x93\x24\x81\x4b\x95\x21\xe4\x28\x51\x73\x8b\x19\xcc\xd6\x60\xf5\xd2\x18\x06\x57\x0f\x70\xff\x30\x85\xeb\xab\xdb\x29\x1b\xf4\x93\x04\x9e\x50\x2f\xa5\x14\x32\x0f\x08\x78\x11\x65\x09\x6a\x85\xfa\x45\x0b\x8b\x60\x0b\x61\x60\x2e\x4a\x0c\xe8\x6f\xa8\x8d\x50\xf2\x1c\x9c\x63\xf1\xff\x66\xd3\xdd\x81\x2b\x6e\xb1\xbb\x4d\xcf\x04\x19\xf4\x6b\x9e\x2e\x78\x8e\x60\x56\x29\x3d\x26\x09\x4c\x9b\xe0\x50\x6b\xb5\x12\x19\x1a\x30\xa8\x57\xa8\xcf\x8c\xc8\x10\x66\x42\x66\x42\xe6\x06\xe6\x4a\x83\x2d\x10\xf2\xa7\xc7\x4b\xb0\x9a\x4b\x53\x2b\x6d\x43\x45\xb7\x16\x96\x56\x94\xe2\x3f\x34\x1e\xd3\x6e\x27\xb9\xae\x53\xf6\x8f\x8f\xc7\x28\xa1\xa8\x68\x19\x46\x83\x7e\x6f\x28\xd1\x26\x85\xb5\xf5\x90\x1e\x52\x25\x2d\xbe\xda\x21\x81\x7a\xc3\x5c\xa9\xbc\x44\x96\xab\x92\xcb\x9c\x29\x9d\xfb\x40\x49\x85\x96\x67\xdc\xf2\x80\xa2\xa5\x36\x13\x0c\x73\x61\x8b\xe5\x8c\xa5\xaa\x4a\x72\x75\xb6\x10\x36\xa1\xdf\x6e\x29\xe1\x60\xd3\x35\xd5\x25\x52\x1c\xf4\x7b\xf5\x0c\x86\xce\xb1\xc7\x2f\xb7\xbe\xbe\x47\x6e\x0b\x38\xdb\x6c\x86\x83\xfe\x38\xd2\x74\xc7\x17\xf8\xf5\xe9\xf1\x32\xf4\x02\x15\x5f\xa0\x01\x0e\x06\x2d\xa8\x39\xa0\xcc\x6a\x25\xa4\x35\xc0\x57\x5c\x94\x7c\x56\x22\x70\xda\xf7\x6c\x39\xc7\x62\x2a\x76\xcf\x2b\xdc\x6c\x5a\x42\xe6\x4b\x99\xbe\x09\x3d\xda\xc6\xba\x6e\xfe\x4d\x40\xd5\x56\x28\x69\x80\x31\xb6\xd3\x76\xe4\xf6\xc1\x6f\x8f\xa1\x9e\xb1\x77\x92\x81\x1b\xf4\x7b\xa6\x03\x36\x70\x7e\x01\xdf\x7f\xbc\x1f\x8d\x0e\xf4\x0e\x6d\x7f\xc1\xb9\xd2\x38\x6a\xc4\x98\xaa\xcb\xa0\xdd\x78\x32\xe8\xf7\x36\x7b\x69\x2e\x80\xd7\x35\xca\x6c\xb4\xb3\xdc\xb6\xc4\x18\x1b\x0f\xfa\x3d\x8d\x76\xa9\x25\xfc\x4e\x09\x43\x1a\x17\x94\x72\x0e\xa6\xea\x6f\xf5\x82\x1a\x76\x1a\x03\x32\x74\xcf\x39\xcd\x65\x8e\xf0\x49\x50\x3b\x2d\xe0\x0e\x6d\xa1\x32\xe3\x21\x3d\xe7\x9a\x00\x9f\x44\xe4\xe4\x1c\x76\x1b\xbb\xc7\x97\xc8\x3e\x1d\xe8\xb5\x12\x30\xe7\xda\x33\x8d\x1a\x13\x0f\xb9\xc2\x54\x65\x5e\xb6\x0e\xe4\x09\x9f\x97\x68\x22\xe2\x5a\x1e\x44\x98\x5a\x49\x83\x01\xb2\xc3\x08\x63\xcc\xaf\x7a\x1a\x9d\x3b\x23\x53\xf9\x06\x36\x83\xfe\x26\xba\x70\xcb\x0e\x88\xaa\x2e\xb1\x42\xf2\x09\x5d\x39\xe7\xbe\x2a\x4f\xcb\x61\xf5\x85\xb4\xa8\xe7\x9c\xcc\x6e\xd7\x35\x76\x03\x19\xab\x97\xa9\x25\x7f\x9c\x40\xe6\x01\x2e\x01\xde\x90\x79\xc3\x65\x56\xa2\xa6\x78\x6d\x13\x4d\x03\x31\x96\x9f\x26\x9d\x1a\xac\xda\xf6\xf3\x0b\xad\x7c\x5c\xb0\xbf\x60\x23\x03\x9f\xb7\xc9\xc6\xdb\x04\x6d\x0f\xa3\xd4\xbe\x42\x1c\x41\x2c\xda\x79\x02\x1a\x9f\xe1\xb3\xbf\x52\x5b\x7c\x94\x78\xba\xae\x9b\xb2\xc6\x30\xda\x07\x05\x95\x3b\xa8\x09\xa0\xd6\x8a\x92\x0f\xfa\xbd\x9f\x14\xbb\xf6\x4b\x54\x38\xd9\x6c\x8f\xd6\x70\xd9\xc8\x3e\x54\x9c\x2f\x86\xee\x89\x98\xfb\x53\xbf\x5d\x80\x14\xa5\x0f\xd6\x5c\x1d\x29\x4a\x1f\x31\x5e\xc2\xb8\xaa\xb1\x66\xa7\xd4\x37\x9e\x50\x00\x2f\x94\x73\x51\x34\xaf\x58\x64\x3d\xf8\xfd\x14\xca\x93\x04\x8e\x5d\x0e\x10\x34\x17\xdf\xbc\x21\xc2\x81\x88\xf8\x93\x34\xb3\x05\xb7\xa4\xc8\x0a\x35\x4d\xd5\xe0\xfe\x30\x4c\xf7\x1d\xa8\x63\x68\xab\x80\xc3\xd2\xa0\x3e\xcb\x54\xc5\x85\x3c\x06\x66\xf0\xa8\x45\xc5\xb5\x28\xd7\x74\x64\xbe\x2c\x41\x48\x3f\xd1\xbb\xb3\xf9\x58\x27\xa3\x9f\xfb\x96\xa1\x6e\x9e\xf0\x79\x6b\x52\x47\xfe\xe8\x3c\xed\xf8\x80\x0c\x76\x7e\xd1\x1c\x3a\xa4\xd3\x9e\xd9\xba\xca\x3e\x7f\xa0\x59\x98\x40\x27\x6a\x76\x74\x5c\x1d\x14\x2d\x9c\x68\x20\xef\xaa\xf6\xb1\x1e\x31\x87\x57\xef\x88\xc6\x75\xb9\x3e\x4d\xb4\xa3\xad\x1c\x52\xad\x2d\xe1\x54\xd9\x4c\x4d\x4c\x36\xc7\x4e\xbb\x60\x5d\xe5\x4c\xfd\x9e\x74\x37\x58\xd6\xa8\x0d\x3d\xf9\x5e\xf6\xde\xb2\x87\x47\x55\x95\xb5\x48\x76\x77\x35\x7e\x0b\xf0\x65\xd3\xcc\x5d\x4c\x60\xe5\x4b\xf7\x86\xa8\xb2\x30\x41\xc4\x1c\x56\x3b\x23\x25\x7c\x22\x21\x2c\x70\xed\xa5\xcf\x32\xfa\x80\x55\xb6\x20\xba\x9b\x44\x34\xc4\x2b\x6e\x61\xb4\x18\xc3\x4b\x21\xd2\xc2\x43\xcb\x12\x4a\x92\xae\x09\xc3\x65\xe6\x5f\x50\xf4\xa5\xc7\x2e\xb9\x54\x52\xa4\xbc\xbc\x41\x9e\xa1\xfe\x0b\xd7\xf4\xf5\x64\x63\x26\xa3\x82\x81\x84\x85\x94\x4b\x98\x61\x1b\x23\x4d\xd1\x18\xcc\x28\x3b\x0a\x5b\xa0\x8e\xb9\x3d\x80\x08\xb9\x68\x3b\xfe\x57\xd8\xe2\x1b\x2f\x97\x18\xc6\x26\x35\xfc\xfd\x8f\x1f\xe3\x8f\x91\xef\x14\x38\x5a\x8c\x3b\x21\xe2\xfb\x78\xab\x65\x6a\x5f\xbd\x8a\xff\x07\x00\x00\xff\xff\xde\xdb\x4e\x58\xf0\x0b\x00\x00")

func svcTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_grpcGotemplate,
		"svc/transport_grpc.gotemplate",
	)
}

func svcTransport_grpcGotemplate() (*asset, error) {
	bytes, err := svcTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_grpc.gotemplate", size: 3056, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0x86, 0xa1, 0x23, 0x1f, 0x58, 0xd7, 0x34, 0xf1, 0x53, 0xb1, 0x6e, 0x3e, 0xc1, 0x64, 0x60, 0x4, 0x13, 0xf9, 0x2a, 0xee, 0xec, 0x12, 0x5c, 0x94, 0x40, 0x4d, 0x83, 0x38, 0xb5, 0x4b, 0x74}}
	return a, nil
}

var _svcTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x41\x0a\xc2\x30\x10\x05\xd0\xbd\xe0\x1d\x66\x5d\x30\x73\x8d\x2e\x85\xe6\x02\xa1\x7e\xa3\x18\x3b\x61\xf2\x75\x33\xf4\xee\x22\x74\xff\x5e\x84\x4e\xb2\x00\x52\xed\x42\xff\x8c\xa1\x15\x5b\xb5\xd7\x93\xfa\x20\x3b\xbd\x6c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\x65\xb5\x1b\x64\xd2\x7d\x3f\x9f\x22\xd6\xd2\x9a\xa4\x39\xe7\xeb\x8c\xd6\xe1\x69\x81\x7f\xe1\xf9\x48\x92\xfe\xec\x17\x00\x00\xff\xff\xec\x4b\xd0\x56\x6c\x00\x00\x00")

func svcTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpGotemplate,
		"svc/transport_http.gotemplate",
	)
}

func svcTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http.gotemplate", size: 108, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa4, 0x6d, 0xd0, 0x90, 0xb, 0xa7, 0xdc, 0xed, 0x93, 0x1e, 0xb8, 0x4d, 0xb9, 0x58, 0x20, 0xd6, 0x10, 0x56, 0x1f, 0x4b, 0xf4, 0x55, 0xdb, 0x96, 0xa5, 0xfd, 0x46, 0xe0, 0x5f, 0x40, 0xf4, 0x57}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/main.gotemplate":               cmdMainGotemplate,
	"handlers/handlers.gotemplate":      handlersHandlersGotemplate,
	"handlers/hooks.gotemplate":         handlersHooksGotemplate,
	"handlers/middlewares.gotemplate":   handlersMiddlewaresGotemplate,
	"svc/client/grpc/client.gotemplate": svcClientGrpcClientGotemplate,
	"svc/client/http/client.gotemplate": svcClientHttpClientGotemplate,
	"svc/config.gotemplate":             svcConfigGotemplate,
	"svc/endpoints.gotemplate":          svcEndpointsGotemplate,
	"svc/server/run.gotemplate":         svcServerRunGotemplate,
	"svc/transport_grpc.gotemplate":     svcTransport_grpcGotemplate,
	"svc/transport_http.gotemplate":     svcTransport_httpGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"main.gotemplate": {cmdMainGotemplate, map[string]*bintree{}},
	}},
	"handlers": {nil, map[string]*bintree{
		"handlers.gotemplate": {handlersHandlersGotemplate, map[string]*bintree{}},
		"hooks.gotemplate": {handlersHooksGotemplate, map[string]*bintree{}},
		"middlewares.gotemplate": {handlersMiddlewaresGotemplate, map[string]*bintree{}},
	}},
	"svc": {nil, map[string]*bintree{
		"client": {nil, map[string]*bintree{
			"grpc": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"config.gotemplate": {svcConfigGotemplate, map[string]*bintree{}},
		"endpoints.gotemplate": {svcEndpointsGotemplate, map[string]*bintree{}},
		"server": {nil, map[string]*bintree{
			"run.gotemplate": {svcServerRunGotemplate, map[string]*bintree{}},
		}},
		"transport_grpc.gotemplate": {svcTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": {svcTransport_httpGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
